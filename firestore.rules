rules_version = '2';

service cloud.firestore {

  match /databases/{database}/documents {

    match /djs/{djId} {
      allow read,list: if true;
      allow delete: if isSignedIn(); 
    	allow create,update: if (isSignedIn() && isValidDJ());  
    }
    match /venues/{venueId} {
      allow read,list: if true;
      allow delete: if isSignedIn(); 
    	allow create,update: if (isSignedIn() && isValidVenue());  
    }
    match /events/{eventId} {
      allow read,list: if true;
      allow delete: if isSignedIn(); 
    	allow create,update: if (isSignedIn() && isValidEvent());  
    }
    match /feedbacks/{feedbackId} {
      allow read,list: if true;
      allow delete: if isSignedIn(); 
    	allow create,update: if (isSignedIn() && isValidFeedback());  
    }
    function isSignedIn() {
    	return request.auth != null
      && request.auth.uid != null  
      && request.auth.token.firebase.sign_in_provider != 'anonymous';
    }
    function isValidDJ() {
    	return incomingData().name.size() > 0 
      && incomingData().name.size() < 31 
      && incomingData().genre.size() > 0;
  	}
    function isValidVenue() {
    	return incomingData().name.size() > 0 
      && incomingData().name.size() < 31 
      && incomingData().address.size() > 0;
    }
    function isValidEvent() {
    	return incomingData().name.size() > 0 
      && incomingData().name.size() < 41 
      && incomingData().genres.size() > 0
      && incomingData().date.size() > 0
      && incomingData().time.size() > 0
      && incomingData().venue.size() > 0
      && incomingData().djs.size() > 0;
  	}
    function isValidFeedback() {
    	return incomingData().collection.size() > 0 
      && incomingData().document.size() > 0;
  	}
    function incomingData() {
      return request.resource.data;
    }

  }
}